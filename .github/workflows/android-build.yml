name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 缓存 Gradle 依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 设置 Gradle Wrapper
      run: |
        # 下载 gradle-wrapper.jar
        mkdir -p gradle/wrapper
        curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar

        # 授予执行权限
        chmod +x gradlew

    - name: 验证 Gradle 设置
      run: ./gradlew --version

    - name: 创建Debug Keystore
      run: |
        # 确保debug.keystore存在
        mkdir -p ~/.android
        if [ ! -f ~/.android/debug.keystore ]; then
          echo "创建debug.keystore用于APK签名..."
          keytool -genkey -v -keystore ~/.android/debug.keystore \
            -storepass android -alias androiddebugkey -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "Debug keystore创建完成"
        else
          echo "Debug keystore已存在"
        fi

        # 验证keystore
        echo "验证keystore信息:"
        keytool -list -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey

    - name: 输出构建信息 (编译前)
      run: |
        echo "=== reding定位模拟器构建信息 ==="
        echo "构建时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Git提交: $(git rev-parse --short HEAD)"
        echo "分支: $(git branch --show-current)"
        echo ""
        echo "=== 应用信息 ==="
        echo "应用名称: reding定位模拟器"
        echo "包名(PackageName): com.dinghong.locationmock"
        echo "版本: 2.0"
        echo ""
        echo "=== Debug版本SHA1 (用于开发测试) ==="

        # 确保debug.keystore存在
        if [ ! -f ~/.android/debug.keystore ]; then
          echo "创建debug.keystore..."
          mkdir -p ~/.android
          keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
        fi

        # 获取完整SHA1并直接显示
        echo "Debug keystore路径: ~/.android/debug.keystore"
        echo ""
        echo "🔑 完整SHA1签名 (用于百度地图API申请):"
        SHA1_VALUE=$(keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android 2>/dev/null | grep "SHA1:" | head -1 | sed 's/.*SHA1: //' | tr -d ' ')
        echo "SHA1: $SHA1_VALUE"
        echo ""
        echo "📋 复制上面的SHA1值用于百度地图API申请"
        echo ""
        echo "=== 百度地图SDK配置说明 ==="
        echo "1. 访问百度地图开放平台: https://lbsyun.baidu.com/apiconsole/key"
        echo "2. 点击【创建应用】"
        echo "3. 填写以下信息:"
        echo "   - 应用名称: reding定位模拟器"
        echo "   - 应用类型: 选择【Android SDK】"
        echo "   - 包名: com.dinghong.locationmock"
        echo "   - SHA1: $SHA1_VALUE"
        echo "4. 获取API Key后，替换AndroidManifest.xml中的YOUR_BAIDU_MAP_API_KEY"
        echo ""

    - name: 构建 Debug APK
      run: |
        echo "=== 开始构建Debug APK ==="
        ./gradlew assembleDebug --stacktrace

    - name: 构建 Release APK
      run: ./gradlew assembleRelease --stacktrace
      
    - name: 生成签名信息和SHA1
      run: |
        echo "=== reding定位模拟器构建信息 ===" > build-info.txt
        echo "构建时间: $(date '+%Y-%m-%d %H:%M:%S')" >> build-info.txt
        echo "Git提交: ${{ github.sha }}" >> build-info.txt
        echo "分支: ${{ github.ref_name }}" >> build-info.txt
        echo "" >> build-info.txt
        echo "=== 应用信息 ===" >> build-info.txt
        echo "应用名称: reding定位模拟器" >> build-info.txt
        echo "包名(PackageName): com.dinghong.locationmock" >> build-info.txt
        echo "版本: 2.0" >> build-info.txt
        echo "" >> build-info.txt

        # 获取Debug版本SHA1（用于文件记录）
        echo "=== Debug版本SHA1 (用于开发和测试) ===" >> build-info.txt
        DEBUG_SHA1=$(keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android 2>/dev/null | grep "SHA1:" | head -1 | sed 's/.*SHA1: //' | tr -d ' ')
        echo "Debug SHA1: $DEBUG_SHA1" >> build-info.txt
        echo "" >> build-info.txt
        echo "=== 百度地图SDK配置说明 ===" >> build-info.txt
        echo "1. 访问百度地图开放平台: https://lbsyun.baidu.com/apiconsole/key" >> build-info.txt
        echo "2. 点击【创建应用】" >> build-info.txt
        echo "3. 填写以下信息:" >> build-info.txt
        echo "   - 应用名称: reding定位模拟器" >> build-info.txt
        echo "   - 应用类型: 选择【Android SDK】" >> build-info.txt
        echo "   - 包名: com.dinghong.locationmock" >> build-info.txt
        echo "   - SHA1: $DEBUG_SHA1" >> build-info.txt
        echo "4. 获取API Key后，替换AndroidManifest.xml中的YOUR_BAIDU_MAP_API_KEY" >> build-info.txt
        echo "" >> build-info.txt
        echo "=== 构建产物信息 ===" >> build-info.txt
        if [ -d "app/build/outputs/apk/debug/" ]; then
          ls -la app/build/outputs/apk/debug/ >> build-info.txt
        fi
        if [ -d "app/build/outputs/apk/release/" ]; then
          ls -la app/build/outputs/apk/release/ >> build-info.txt
        fi
        
    - name: 重命名APK文件
      run: |
        mkdir -p release-files

        # 检查APK文件是否存在并复制
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          cp app/build/outputs/apk/debug/app-debug.apk release-files/reding-debug.apk
          echo "✅ Debug APK已复制: reding-debug.apk"
        else
          echo "❌ Debug APK文件不存在"
          find app/build/outputs/apk/debug/ -name "*.apk" || echo "Debug目录为空"
        fi

        # Release APK现在应该是签名的，文件名为app-release.apk
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          cp app/build/outputs/apk/release/app-release.apk release-files/reding-release.apk
          echo "✅ Release APK已复制: reding-release.apk (已签名)"
        elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          cp app/build/outputs/apk/release/app-release-unsigned.apk release-files/reding-release.apk
          echo "⚠️ Release APK已复制: reding-release.apk (未签名版本)"
        else
          echo "❌ Release APK文件不存在"
          find app/build/outputs/apk/release/ -name "*.apk" || echo "Release目录为空"
        fi

        cp build-info.txt release-files/

        # 显示最终文件
        echo "📦 最终生成的文件:"
        ls -la release-files/

    - name: 验证APK签名
      run: |
        echo "=== 验证APK签名信息 ==="

        if [ -f "release-files/reding-debug.apk" ]; then
          echo "🔍 Debug APK基本信息:"
          file release-files/reding-debug.apk
          ls -la release-files/reding-debug.apk

          # 使用unzip检查APK内容
          echo "📦 APK内容检查:"
          unzip -l release-files/reding-debug.apk | grep -E "(META-INF|AndroidManifest)" | head -10

          # 检查签名文件
          echo "🔐 签名文件检查:"
          unzip -l release-files/reding-debug.apk | grep "META-INF.*\.(RSA\|DSA\|SF\|MF)" || echo "未找到签名文件"

          # 使用jarsigner验证签名（Java工具，应该可用）
          if command -v jarsigner &> /dev/null; then
            echo "🔍 使用jarsigner验证签名:"
            jarsigner -verify -verbose release-files/reding-debug.apk && echo "✅ Debug APK签名有效" || echo "❌ Debug APK签名无效"
          fi
        fi

        if [ -f "release-files/reding-release.apk" ]; then
          echo "🔍 Release APK基本信息:"
          file release-files/reding-release.apk
          ls -la release-files/reding-release.apk

          # 使用unzip检查APK内容
          echo "📦 APK内容检查:"
          unzip -l release-files/reding-release.apk | grep -E "(META-INF|AndroidManifest)" | head -10

          # 检查签名文件
          echo "🔐 签名文件检查:"
          unzip -l release-files/reding-release.apk | grep "META-INF.*\.(RSA\|DSA\|SF\|MF)" || echo "未找到签名文件"

          # 使用jarsigner验证签名
          if command -v jarsigner &> /dev/null; then
            echo "🔍 使用jarsigner验证签名:"
            jarsigner -verify -verbose release-files/reding-release.apk && echo "✅ Release APK签名有效" || echo "❌ Release APK签名无效"
          fi
        fi

    - name: 上传Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: reding-debug-apk
        path: release-files/reding-debug.apk

    - name: 上传Release APK
      uses: actions/upload-artifact@v4
      with:
        name: reding-release-apk
        path: release-files/reding-release.apk
        
    - name: 上传构建信息
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: release-files/build-info.txt
        
    - name: 输出构建结果
      run: |
        echo "🎉 reding定位模拟器构建完成!"
        echo ""
        echo "📱 应用信息:"
        echo "  - 应用名称: reding定位模拟器"
        echo "  - 包名: com.dinghong.locationmock"
        echo "  - 版本: 2.0"
        echo ""
        echo "📦 构建产物:"
        echo "  - Debug APK: reding-debug.apk (已签名，可直接安装)"
        echo "  - Release APK: reding-release.apk (已签名，可直接安装)"
        echo "  - 构建信息: build-info.txt"
        echo ""
        echo "🔑 百度地图SDK配置:"
        echo "  1. 访问: https://lbsyun.baidu.com/apiconsole/key"
        echo "  2. 创建应用，选择【Android SDK】"
        echo "  3. 输入包名: com.dinghong.locationmock"
        echo "  4. 输入SHA1: 请查看build-info.txt文件中的Debug SHA1"
        echo "  5. 将获得的API Key替换AndroidManifest.xml中的YOUR_BAIDU_MAP_API_KEY"
        echo ""
        echo "✅ 所有文件已上传到GitHub Actions Artifacts"
        
  # 发布到Release（仅在创建Release时触发）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: 上传到Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/reding-debug-apk/reding-debug.apk
          artifacts/reding-release-apk/reding-release.apk
          artifacts/build-info/build-info.txt
        body: |
          ## reding定位模拟器 v2.0
          
          ### 🚀 新功能特性
          - ✨ 全新Material Design 3界面设计
          - 🗺️ 集成百度地图SDK，支持卫星地图显示
          - 🎯 智能位置模拟系统（标准模式 + 增强模式）
          - 🔍 智能地址搜索和坐标输入识别
          - 🛠️ 专业调试面板，实时状态监控
          - 📱 适配Android 6.0 - 14.0全版本
          
          ### 📋 使用说明
          1. 下载并安装APK文件
          2. 在开发者选项中启用"模拟位置信息应用"
          3. 申请百度地图API Key并配置到应用中
          4. 授予位置权限后即可使用
          
          ### 🔑 百度地图API Key配置
          - 包名: `com.dinghong.locationmock`
          - SHA1: 请查看build-info.txt文件
          - 申请地址: https://lbsyun.baidu.com/apiconsole/key
          
          ### 📦 下载文件
          - `reding-debug.apk`: 调试版本（已签名，可直接安装）
          - `reding-release.apk`: 发布版本（已签名，可直接安装）
          - `build-info.txt`: 构建信息和配置说明

          ### 🔧 安装说明
          两个APK文件都已使用debug keystore签名，可以直接通过以下方式安装：
          - 通过ADB: `adb install reding-debug.apk` 或 `adb install reding-release.apk`
          - 直接在设备上安装（需要允许未知来源）
          - 不会出现证书错误
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
